AUTHOR :- D NAGA VYSHNAV 

import os
import base64
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Random import get_random_bytes
from getpass import getpass

BLOCK_SIZE = 16
KEY_SIZE = 32
SALT_SIZE = 16
IV_SIZE = 16
ITERATIONS = 100_000

def pad(data):
    padding_len = BLOCK_SIZE - len(data) % BLOCK_SIZE
    return data + bytes([padding_len] * padding_len)

def unpad(data):
    return data[:-data[-1]]

def derive_key(password, salt):
    return PBKDF2(password, salt, dkLen=KEY_SIZE, count=ITERATIONS)

def encrypt_file(input_file, output_file, password):
    salt = get_random_bytes(SALT_SIZE)
    iv = get_random_bytes(IV_SIZE)
    key = derive_key(password.encode(), salt)

    cipher = AES.new(key, AES.MODE_CBC, iv)

    with open(input_file, 'rb') as f:
        plaintext = f.read()

    ciphertext = cipher.encrypt(pad(plaintext))

    with open(output_file, 'wb') as f:
        f.write(salt + iv + ciphertext)

def decrypt_file(input_file, output_file, password):
    with open(input_file, 'rb') as f:
        salt = f.read(SALT_SIZE)
        iv = f.read(IV_SIZE)
        ciphertext = f.read()

    key = derive_key(password.encode(), salt)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad(cipher.decrypt(ciphertext))

    with open(output_file, 'wb') as f:
        f.write(plaintext)

def main():
    choice = input("Encrypt or Decrypt (E/D)? ").strip().upper()
    input_file = input("Input file: ")
    output_file = input("Output file: ")
    password = getpass("Password: ")

    if choice == 'E':
        encrypt_file(input_file, output_file, password)
        print(f"Encrypted file saved to {output_file}")
    elif choice == 'D':
        decrypt_file(input_file, output_file, password)
        print(f"Decrypted file saved to {output_file}")
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
